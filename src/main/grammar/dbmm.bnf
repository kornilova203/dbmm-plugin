{
  parserClass="com.github.korniloval.dbmm.DbmmGeneratedParser"
  extends="com.github.korniloval.dbmm.psi.DbmmCompositePsiElement"
  psiClassPrefix="Dbmm"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.korniloval.dbmm.psi"
  psiImplPackage="com.github.korniloval.dbmm.psi.impl"

  elementTypeHolderClass="com.github.korniloval.dbmm.psi.DbmmTypes"
  elementTypeClass="com.github.korniloval.dbmm.psi.DbmmElementType"
  tokenTypeClass="com.github.korniloval.dbmm.psi.DbmmTokenType"

  mixin("element_definition")="com.github.korniloval.dbmm.psi.DbmmElementDefinitionMixin"
  mixin("element_ref")="com.github.korniloval.dbmm.psi.DbmmElementRefMixin"

  tokens=[
    WHITE_SPACE='regexp:\s+'
    COLON=':'
    COMMA=','
    DOT='.'
    RBRACKET='['
    LBRACKET=']'
  ]
}

root ::= ( COMMENT | element_definition )*

element_definition ::= IDENTIFIER ':' ( ABSTRACT? options? ) interface_or_kind_list
  field_definition* { pin=2 }
private options ::= '[' element_option* ']' { pin=1 }
element_option ::= OPTION { recoverWhile=not_option_or_rbracket }
private not_option_or_rbracket ::= !( OPTION | ']' )
private interface_or_kind_list ::= interface_or_kind (',' interface_or_kind)* { pin=1 }
interface_or_kind ::= IDENTIFIER { recoverWhile=not_identifier_or_comma }
private not_identifier_or_comma ::= !( ',' | IDENTIFIER )

field_definition ::= element_ref ':' ( family_type | property_type | const_type | parent_entity )
family_type ::= FAMILY [OF element_ref]
element_ref ::= IDENTIFIER
property_type ::= EXTERNAL? PROPERTY
 ( collection_type
 | class_ref
 )
 default_type?
 { pin="PROPERTY" }
const_type ::= CONST java_code { pin=1 }
default_type ::= DEFAULT java_code { pin=1 }
private java_code ::= JAVA_CODE { name="value" }
collection_type ::= ( LIST | SET ) OF class_ref { pin=1 }
class_ref ::= IDENTIFIER ('.' IDENTIFIER)*
parent_entity ::= PARENT ENTITY [ IDENTIFIER !':' ] { pin=1 }
